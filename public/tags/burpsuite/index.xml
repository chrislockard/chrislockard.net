<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>burpsuite on Unl0ckd</title>
    <link>https://www.chrislockard.net/tags/burpsuite/</link>
    <description>Recent content in burpsuite on Unl0ckd</description>
    <image>
      <url>https://www.chrislockard.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.chrislockard.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 10 Apr 2018 12:00:00 -0400</lastBuildDate><atom:link href="https://www.chrislockard.net/tags/burpsuite/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Static Analysis with Burp Suite</title>
      <link>https://www.chrislockard.net/posts/burp-static-analysis/</link>
      <pubDate>Tue, 10 Apr 2018 12:00:00 -0400</pubDate>
      
      <guid>https://www.chrislockard.net/posts/burp-static-analysis/</guid>
      <description>I&amp;rsquo;m so far behind the times, it&amp;rsquo;s sad. Burp Suite gained the ability to perform static analysis on JavaScript libraries back in 2014. Some sites and authors have already blogged about what their approach is for implementing this.I&amp;rsquo;d like to echo Lukas&amp;rsquo;s method, but with an easier setup.
Simply navigate to the local directory containing the app and serve it using Python&amp;rsquo;s built-in HTTP server.
 python2 syntax: python -m SimpleHTTPServer &amp;lt;port&amp;gt; python3 syntax: python3 -m http.</description>
    </item>
    
    <item>
      <title>Fix AWS SSL Certificate error in Burpsuite</title>
      <link>https://www.chrislockard.net/posts/fix-aws-ssl-certificate-error-burpsuite/</link>
      <pubDate>Wed, 11 Jan 2017 12:00:00 -0400</pubDate>
      
      <guid>https://www.chrislockard.net/posts/fix-aws-ssl-certificate-error-burpsuite/</guid>
      <description>This morning, while I was trying to proxy traffic to this site in Burpsuite, I ran across an SSL handshake error. Googling the issue returned this helpful article that got me started on the right path. The crux of the problem was that the JRE didn&amp;rsquo;t have the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy files installed. However, since this article was published, Portswigger began bundling the JRE with Burpsuite itself.</description>
    </item>
    
    <item>
      <title>Configure an Upstream Proxy for Burpsuite</title>
      <link>https://www.chrislockard.net/posts/configure-upstream-proxy-burpsuite/</link>
      <pubDate>Thu, 05 Nov 2015 12:00:00 -0400</pubDate>
      
      <guid>https://www.chrislockard.net/posts/configure-upstream-proxy-burpsuite/</guid>
      <description>I had the need to proxy traffic from Burpsuite to another proxy during web app testing this week. There are a few ways to do this, but this method was the easiest since I already had Burpsuite&amp;rsquo;s TLS certificate installed. For more information on this, see the Burpsuite help. To configure an upstream proxy for Burpsuite, such as OWASP ZAP, follow these steps:
First, configure your upstream proxy that will sit between Burpsuite and the web application to listen on a different port since they both bind TCP 8080 by default.</description>
    </item>
    
  </channel>
</rss>
