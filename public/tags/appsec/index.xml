<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>appsec on Unl0ckd</title>
    <link>https://www.chrislockard.net/tags/appsec/</link>
    <description>Recent content in appsec on Unl0ckd</description>
    <image>
      <url>https://www.chrislockard.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.chrislockard.net/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 15 Oct 2018 12:00:00 -0400</lastBuildDate><atom:link href="https://www.chrislockard.net/tags/appsec/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mallory in the Mobile</title>
      <link>https://www.chrislockard.net/posts/mallory-in-the-mobile/</link>
      <pubDate>Mon, 15 Oct 2018 12:00:00 -0400</pubDate>
      
      <guid>https://www.chrislockard.net/posts/mallory-in-the-mobile/</guid>
      <description>Use mallory proxy to view non-https encrypted mobile traffic</description>
    </item>
    
    <item>
      <title>Static Analysis with Burp Suite</title>
      <link>https://www.chrislockard.net/posts/burp-static-analysis/</link>
      <pubDate>Tue, 10 Apr 2018 12:00:00 -0400</pubDate>
      
      <guid>https://www.chrislockard.net/posts/burp-static-analysis/</guid>
      <description>I&amp;rsquo;m so far behind the times, it&amp;rsquo;s sad. Burp Suite gained the ability to perform static analysis on JavaScript libraries back in 2014. Some sites and authors have already blogged about what their approach is for implementing this.I&amp;rsquo;d like to echo Lukas&amp;rsquo;s method, but with an easier setup.
Simply navigate to the local directory containing the app and serve it using Python&amp;rsquo;s built-in HTTP server.
 python2 syntax: python -m SimpleHTTPServer &amp;lt;port&amp;gt; python3 syntax: python3 -m http.</description>
    </item>
    
    <item>
      <title>iOS and Android Native Code Protections</title>
      <link>https://www.chrislockard.net/posts/ios-android-code-protections/</link>
      <pubDate>Mon, 19 Jun 2017 12:00:00 -0400</pubDate>
      
      <guid>https://www.chrislockard.net/posts/ios-android-code-protections/</guid>
      <description>iOS Secure Boot Chain Each step of the startup process contains components that are cryptographically signed by Apple to ensure integrity and that proceed only after verifying the chain of trust. This includes the bootloaders, kernel, kernel extensions, and baseband firmware. This secure boot chain helps ensure that the lowest levels of software arenâ€™t tampered with.
When an iOS device is turned on, its application processor immediately executes code from read-only memory known as the Boot ROM.</description>
    </item>
    
    <item>
      <title>Developing an Application Security Program</title>
      <link>https://www.chrislockard.net/posts/application-security-program/</link>
      <pubDate>Tue, 21 Mar 2017 12:00:00 -0400</pubDate>
      
      <guid>https://www.chrislockard.net/posts/application-security-program/</guid>
      <description>Since my last post, I&amp;rsquo;ve left my position with the consultancy. I&amp;rsquo;m now working for a medium-sized corporation in a senior application security role. One of my many tasks is to contribute to the development of an Application Security program. This post will serve as my thoughts on setting up an AppSec Program.
Measuring current performance The Building Security In Maturity Model (BSIMM) is a study of existing software security initiatives used by 95 companies of varying size across six verticals.</description>
    </item>
    
    <item>
      <title>Fix AWS SSL Certificate error in Burpsuite</title>
      <link>https://www.chrislockard.net/posts/fix-aws-ssl-certificate-error-burpsuite/</link>
      <pubDate>Wed, 11 Jan 2017 12:00:00 -0400</pubDate>
      
      <guid>https://www.chrislockard.net/posts/fix-aws-ssl-certificate-error-burpsuite/</guid>
      <description>This morning, while I was trying to proxy traffic to this site in Burpsuite, I ran across an SSL handshake error. Googling the issue returned this helpful article that got me started on the right path. The crux of the problem was that the JRE didn&amp;rsquo;t have the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy files installed. However, since this article was published, Portswigger began bundling the JRE with Burpsuite itself.</description>
    </item>
    
    <item>
      <title>Configure an Upstream Proxy for Burpsuite</title>
      <link>https://www.chrislockard.net/posts/configure-upstream-proxy-burpsuite/</link>
      <pubDate>Thu, 05 Nov 2015 12:00:00 -0400</pubDate>
      
      <guid>https://www.chrislockard.net/posts/configure-upstream-proxy-burpsuite/</guid>
      <description>I had the need to proxy traffic from Burpsuite to another proxy during web app testing this week. There are a few ways to do this, but this method was the easiest since I already had Burpsuite&amp;rsquo;s TLS certificate installed. For more information on this, see the Burpsuite help. To configure an upstream proxy for Burpsuite, such as OWASP ZAP, follow these steps:
First, configure your upstream proxy that will sit between Burpsuite and the web application to listen on a different port since they both bind TCP 8080 by default.</description>
    </item>
    
    <item>
      <title>PHP, MySql, and Injection</title>
      <link>https://www.chrislockard.net/posts/php-mysql-injection/</link>
      <pubDate>Wed, 26 Nov 2014 12:00:00 -0400</pubDate>
      
      <guid>https://www.chrislockard.net/posts/php-mysql-injection/</guid>
      <description>Inspired by Jack Daniel&amp;rsquo;s &amp;ldquo;Shoulders of InfoSec Project&amp;rdquo;, this post will be focused on the people and technologies behind one of the most prevalent attacks on web sites: SQL injection.
According to OWASP, injection is the number one attack vector for web applications. Injection attacks can target many different contexts in a web application: HTML, PHP, ASP, Javascript, SQL, etc. Any context in which an interpreter parses input to execute instructions is potentially vulnerable to an injection attack.</description>
    </item>
    
    <item>
      <title>URL Encoding</title>
      <link>https://www.chrislockard.net/posts/url-encoding/</link>
      <pubDate>Mon, 06 Oct 2014 12:00:00 -0400</pubDate>
      
      <guid>https://www.chrislockard.net/posts/url-encoding/</guid>
      <description>URL Syntax https://admin:pass123@www.example.com:80/bio.txt;pp=1&amp;amp;qp=2#Three
   URL Part URL Data     Scheme https   User admin   Password pass123   Subdomain www   Domain example.com   Port 80   Path /bio.txt   Path Parameter pp=1   Query Parameter qp=2   Fragment Three    Safe Characters RFC1738 section 2.2 outlines the safe characters to use in an HTTP URL Scheme:</description>
    </item>
    
    <item>
      <title>Local File Inclusion Mini-list</title>
      <link>https://www.chrislockard.net/posts/local-file-inclusion-mini-list/</link>
      <pubDate>Thu, 25 Sep 2014 12:00:00 -0400</pubDate>
      
      <guid>https://www.chrislockard.net/posts/local-file-inclusion-mini-list/</guid>
      <description>A mini-list reference for interesting LFI targets</description>
    </item>
    
  </channel>
</rss>
